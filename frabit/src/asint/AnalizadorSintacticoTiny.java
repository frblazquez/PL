
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 21 14:35:54 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import ast.*;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 21 14:35:54 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\044\004\000\002\002\004\000\002\045" +
    "\004\000\002\045\004\000\002\045\002\000\002\046\007" +
    "\000\002\042\007\000\002\043\010\000\002\023\003\000" +
    "\002\023\002\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\005\006\000\002\006\004" +
    "\000\002\006\006\000\002\007\007\000\002\010\005\000" +
    "\002\011\007\000\002\012\006\000\002\002\004\000\002" +
    "\013\011\000\002\013\012\000\002\014\004\000\002\015" +
    "\006\000\002\015\005\000\002\015\002\000\002\017\004" +
    "\000\002\017\002\000\002\016\006\000\002\020\005\000" +
    "\002\021\003\000\002\021\002\000\002\022\005\000\002" +
    "\022\003\000\002\004\004\000\002\004\002\000\002\024" +
    "\005\000\002\025\010\000\002\026\003\000\002\026\003" +
    "\000\002\026\007\000\002\026\004\000\002\026\005\000" +
    "\002\027\005\000\002\027\003\000\002\047\004\000\002" +
    "\030\005\000\002\030\003\000\002\031\005\000\002\031" +
    "\003\000\002\032\005\000\002\032\003\000\002\033\005" +
    "\000\002\033\003\000\002\034\004\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\005\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\016\007\ufffd\017\ufffd\030\ufffd\043\ufffd\044" +
    "\ufffd\053\ufffd\001\002\000\004\002\231\001\002\000\016" +
    "\007\012\017\017\030\011\043\006\044\010\053\014\001" +
    "\002\000\006\013\225\054\uffd6\001\002\000\004\054\224" +
    "\001\002\000\010\014\uffd5\027\uffd5\054\uffd5\001\002\000" +
    "\014\007\012\017\017\030\011\043\022\044\010\001\002" +
    "\000\014\007\012\017\017\030\011\043\022\044\010\001" +
    "\002\000\004\002\001\001\002\000\004\054\211\001\002" +
    "\000\004\015\026\001\002\000\016\007\ufffe\017\ufffe\030" +
    "\ufffe\043\ufffe\044\ufffe\053\ufffe\001\002\000\014\007\012" +
    "\017\017\030\011\043\022\044\010\001\002\000\016\007" +
    "\uffff\017\uffff\030\uffff\043\uffff\044\uffff\053\uffff\001\002" +
    "\000\004\014\023\001\002\000\010\014\uffd6\027\uffd6\054" +
    "\uffd6\001\002\000\004\004\024\001\002\000\004\020\025" +
    "\001\002\000\010\014\uffd4\027\uffd4\054\uffd4\001\002\000" +
    "\016\007\012\016\ufff8\017\017\030\011\043\022\044\010" +
    "\001\002\000\004\016\034\001\002\000\006\014\uffcd\016" +
    "\uffcd\001\002\000\006\014\032\016\ufff9\001\002\000\014" +
    "\007\012\017\017\030\011\043\022\044\010\001\002\000" +
    "\006\014\uffce\016\uffce\001\002\000\004\021\035\001\002" +
    "\000\026\007\uffd9\017\uffd9\030\uffd9\036\uffd9\040\uffd9\043" +
    "\uffd9\044\uffd9\047\uffd9\050\uffd9\054\uffd9\001\002\000\016" +
    "\007\ufffb\017\ufffb\030\ufffb\043\ufffb\044\ufffb\053\ufffb\001" +
    "\002\000\026\007\012\017\017\030\011\036\044\040\040" +
    "\043\022\044\010\047\041\050\043\054\042\001\002\000" +
    "\004\015\205\001\002\000\024\004\063\006\062\012\101" +
    "\015\064\023\067\026\074\045\066\046\070\054\042\001" +
    "\002\000\054\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\014\uffe3\015\166\016\uffe3\017\uffe3\020\uffe3\024\uffe3\025" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\041\uffe3\042\uffe3\001\002\000\004\015\145\001" +
    "\002\000\004\015\141\001\002\000\030\007\uffda\017\uffda" +
    "\022\uffda\030\uffda\036\uffda\040\uffda\043\uffda\044\uffda\047" +
    "\uffda\050\uffda\054\uffda\001\002\000\030\007\ufff2\017\ufff2" +
    "\022\ufff2\030\ufff2\036\ufff2\040\ufff2\043\ufff2\044\ufff2\047" +
    "\ufff2\050\ufff2\054\ufff2\001\002\000\006\011\135\041\136" +
    "\001\002\000\030\007\ufff6\017\ufff6\022\ufff6\030\ufff6\036" +
    "\ufff6\040\ufff6\043\ufff6\044\ufff6\047\ufff6\050\ufff6\054\ufff6" +
    "\001\002\000\032\007\ufff5\017\ufff5\022\ufff5\030\ufff5\036" +
    "\ufff5\037\130\040\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5" +
    "\054\ufff5\001\002\000\030\007\ufff4\017\ufff4\022\ufff4\030" +
    "\ufff4\036\ufff4\040\ufff4\043\ufff4\044\ufff4\047\ufff4\050\ufff4" +
    "\054\ufff4\001\002\000\030\007\ufff1\017\ufff1\022\ufff1\030" +
    "\ufff1\036\ufff1\040\ufff1\043\ufff1\044\ufff1\047\ufff1\050\ufff1" +
    "\054\ufff1\001\002\000\030\007\ufff7\017\ufff7\022\ufff7\030" +
    "\ufff7\036\ufff7\040\ufff7\043\ufff7\044\ufff7\047\ufff7\050\ufff7" +
    "\054\ufff7\001\002\000\004\011\061\001\002\000\030\007" +
    "\ufff3\017\ufff3\022\ufff3\030\ufff3\036\ufff3\040\ufff3\043\ufff3" +
    "\044\ufff3\047\ufff3\050\ufff3\054\ufff3\001\002\000\004\041" +
    "\060\001\002\000\030\007\uffe9\017\uffe9\022\uffe9\030\uffe9" +
    "\036\uffe9\040\uffe9\043\uffe9\044\uffe9\047\uffe9\050\uffe9\054" +
    "\uffe9\001\002\000\024\004\063\006\062\012\101\015\064" +
    "\023\067\026\074\045\066\046\070\054\042\001\002\000" +
    "\024\004\uffb1\006\uffb1\012\uffb1\015\uffb1\023\uffb1\026\uffb1" +
    "\045\uffb1\046\uffb1\054\uffb1\001\002\000\044\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\014\uffc4\016\uffc4\020\uffc4\024\uffc4" +
    "\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\035" +
    "\uffc4\041\uffc4\042\uffc4\001\002\000\024\004\063\006\062" +
    "\012\101\015\064\023\067\026\074\045\066\046\070\054" +
    "\042\001\002\000\044\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\014\uffbf\016\uffbf\020\uffbf\024\uffbf\025\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\041\uffbf\042\uffbf" +
    "\001\002\000\044\005\uffc3\006\uffc3\007\uffc3\010\uffc3\014" +
    "\uffc3\016\uffc3\020\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\034\uffc3\035\uffc3\041\uffc3\042\uffc3\001" +
    "\002\000\044\005\uffc1\006\uffc1\007\uffc1\010\uffc1\014\uffc1" +
    "\016\uffc1\020\uffc1\024\uffc1\025\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\034\uffc1\035\uffc1\041\uffc1\042\uffc1\001\002" +
    "\000\044\005\uffc2\006\uffc2\007\uffc2\010\uffc2\014\uffc2\016" +
    "\uffc2\020\uffc2\024\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\034\uffc2\035\uffc2\041\uffc2\042\uffc2\001\002\000" +
    "\044\005\uffbe\006\uffbe\007\uffbe\010\uffbe\014\uffbe\016\uffbe" +
    "\020\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\034\uffbe\035\uffbe\041\uffbe\042\uffbe\001\002\000\044" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\014\uffc5\016\uffc5\020" +
    "\uffc5\024\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\034\uffc5\035\uffc5\041\uffc5\042\uffc5\001\002\000\044\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\014\uffc7\016\uffc7\020\uffc7" +
    "\024\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\034" +
    "\uffc7\035\uffc7\041\uffc7\042\uffc7\001\002\000\024\004\uffb0" +
    "\006\uffb0\012\uffb0\015\uffb0\023\uffb0\026\uffb0\045\uffb0\046" +
    "\uffb0\054\uffb0\001\002\000\044\005\uffc9\006\uffc9\007\124" +
    "\010\123\014\uffc9\016\uffc9\020\uffc9\024\122\025\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\041\uffc9" +
    "\042\uffc9\001\002\000\036\005\111\006\107\014\uffcb\016" +
    "\uffcb\020\uffcb\025\116\027\113\030\110\031\112\032\104" +
    "\034\115\035\114\041\uffcb\042\uffcb\001\002\000\004\041" +
    "\103\001\002\000\024\004\063\006\062\012\101\015\064" +
    "\023\067\026\074\045\066\046\070\054\042\001\002\000" +
    "\024\004\uffaf\006\uffaf\012\uffaf\015\uffaf\023\uffaf\026\uffaf" +
    "\045\uffaf\046\uffaf\054\uffaf\001\002\000\044\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\014\uffc6\016\uffc6\020\uffc6\024\uffc6" +
    "\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035" +
    "\uffc6\041\uffc6\042\uffc6\001\002\000\030\007\ufff0\017\ufff0" +
    "\022\ufff0\030\ufff0\036\ufff0\040\ufff0\043\ufff0\044\ufff0\047" +
    "\ufff0\050\ufff0\054\ufff0\001\002\000\024\004\uffb9\006\uffb9" +
    "\012\uffb9\015\uffb9\023\uffb9\026\uffb9\045\uffb9\046\uffb9\054" +
    "\uffb9\001\002\000\024\004\063\006\062\012\101\015\064" +
    "\023\067\026\074\045\066\046\070\054\042\001\002\000" +
    "\024\004\063\006\062\012\101\015\064\023\067\026\074" +
    "\045\066\046\070\054\042\001\002\000\024\004\uffb6\006" +
    "\uffb6\012\uffb6\015\uffb6\023\uffb6\026\uffb6\045\uffb6\046\uffb6" +
    "\054\uffb6\001\002\000\024\004\uffba\006\uffba\012\uffba\015" +
    "\uffba\023\uffba\026\uffba\045\uffba\046\uffba\054\uffba\001\002" +
    "\000\024\004\uffb7\006\uffb7\012\uffb7\015\uffb7\023\uffb7\026" +
    "\uffb7\045\uffb7\046\uffb7\054\uffb7\001\002\000\024\004\uffb8" +
    "\006\uffb8\012\uffb8\015\uffb8\023\uffb8\026\uffb8\045\uffb8\046" +
    "\uffb8\054\uffb8\001\002\000\024\004\uffbb\006\uffbb\012\uffbb" +
    "\015\uffbb\023\uffbb\026\uffbb\045\uffbb\046\uffbb\054\uffbb\001" +
    "\002\000\024\004\uffbd\006\uffbd\012\uffbd\015\uffbd\023\uffbd" +
    "\026\uffbd\045\uffbd\046\uffbd\054\uffbd\001\002\000\024\004" +
    "\uffbc\006\uffbc\012\uffbc\015\uffbc\023\uffbc\026\uffbc\045\uffbc" +
    "\046\uffbc\054\uffbc\001\002\000\024\004\uffb5\006\uffb5\012" +
    "\uffb5\015\uffb5\023\uffb5\026\uffb5\045\uffb5\046\uffb5\054\uffb5" +
    "\001\002\000\022\005\111\006\107\014\uffcc\016\uffcc\020" +
    "\uffcc\025\116\041\uffcc\042\uffcc\001\002\000\044\005\uffca" +
    "\006\uffca\007\124\010\123\014\uffca\016\uffca\020\uffca\024" +
    "\122\025\uffca\027\uffca\030\uffca\031\uffca\032\uffca\034\uffca" +
    "\035\uffca\041\uffca\042\uffca\001\002\000\024\004\063\006" +
    "\062\012\101\015\064\023\067\026\074\045\066\046\070" +
    "\054\042\001\002\000\024\004\uffb2\006\uffb2\012\uffb2\015" +
    "\uffb2\023\uffb2\026\uffb2\045\uffb2\046\uffb2\054\uffb2\001\002" +
    "\000\024\004\uffb3\006\uffb3\012\uffb3\015\uffb3\023\uffb3\026" +
    "\uffb3\045\uffb3\046\uffb3\054\uffb3\001\002\000\024\004\uffb4" +
    "\006\uffb4\012\uffb4\015\uffb4\023\uffb4\026\uffb4\045\uffb4\046" +
    "\uffb4\054\uffb4\001\002\000\044\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\014\uffc8\016\uffc8\020\uffc8\024\uffc8\025\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\034\uffc8\035\uffc8\041\uffc8" +
    "\042\uffc8\001\002\000\004\016\127\001\002\000\044\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\014\uffc0\016\uffc0\020\uffc0" +
    "\024\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034" +
    "\uffc0\035\uffc0\041\uffc0\042\uffc0\001\002\000\004\021\131" +
    "\001\002\000\026\007\uffd9\017\uffd9\022\uffd9\030\uffd9\036" +
    "\uffd9\040\uffd9\043\uffd9\044\uffd9\050\uffd9\054\uffd9\001\002" +
    "\000\030\007\uffec\017\uffec\022\uffec\030\uffec\036\uffec\040" +
    "\uffec\043\uffec\044\uffec\047\uffec\050\uffec\054\uffec\001\002" +
    "\000\026\007\012\017\017\022\134\030\011\036\044\040" +
    "\040\043\022\044\010\050\043\054\042\001\002\000\040" +
    "\007\uffd8\017\uffd8\022\uffd8\030\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\043\uffd8\044\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\001\002\000\024\004\063\006\062\012" +
    "\101\015\064\023\067\026\074\045\066\046\070\054\042" +
    "\001\002\000\030\007\uffef\017\uffef\022\uffef\030\uffef\036" +
    "\uffef\040\uffef\043\uffef\044\uffef\047\uffef\050\uffef\054\uffef" +
    "\001\002\000\004\041\140\001\002\000\030\007\uffee\017" +
    "\uffee\022\uffee\030\uffee\036\uffee\040\uffee\043\uffee\044\uffee" +
    "\047\uffee\050\uffee\054\uffee\001\002\000\024\004\063\006" +
    "\062\012\101\015\064\023\067\026\074\045\066\046\070" +
    "\054\042\001\002\000\004\016\143\001\002\000\004\021" +
    "\131\001\002\000\032\007\uffed\017\uffed\022\uffed\030\uffed" +
    "\036\uffed\037\uffed\040\uffed\043\uffed\044\uffed\047\uffed\050" +
    "\uffed\054\uffed\001\002\000\024\004\063\006\062\012\101" +
    "\015\064\023\067\026\074\045\066\046\070\054\042\001" +
    "\002\000\004\016\147\001\002\000\004\021\150\001\002" +
    "\000\010\022\uffe1\051\uffe1\052\uffe1\001\002\000\010\022" +
    "\155\051\156\052\152\001\002\000\004\042\163\001\002" +
    "\000\004\022\162\001\002\000\010\022\uffe2\051\uffe2\052" +
    "\uffe2\001\002\000\030\007\uffe8\017\uffe8\022\uffe8\030\uffe8" +
    "\036\uffe8\040\uffe8\043\uffe8\044\uffe8\047\uffe8\050\uffe8\054" +
    "\uffe8\001\002\000\024\004\063\006\062\012\101\015\064" +
    "\023\067\026\074\045\066\046\070\054\042\001\002\000" +
    "\004\042\160\001\002\000\004\021\131\001\002\000\010" +
    "\022\uffe0\051\uffe0\052\uffe0\001\002\000\030\007\uffe7\017" +
    "\uffe7\022\uffe7\030\uffe7\036\uffe7\040\uffe7\043\uffe7\044\uffe7" +
    "\047\uffe7\050\uffe7\054\uffe7\001\002\000\004\021\131\001" +
    "\002\000\004\022\uffdf\001\002\000\052\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\014\uffe6\016\uffe6\017\175\020" +
    "\uffe6\024\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\176\034\uffe6\035\uffe6\041\uffe6\042\uffe6\001\002\000" +
    "\026\004\063\006\062\012\101\015\064\016\uffdd\023\067" +
    "\026\074\045\066\046\070\054\042\001\002\000\006\014" +
    "\173\016\uffde\001\002\000\004\016\172\001\002\000\006" +
    "\014\uffdb\016\uffdb\001\002\000\044\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\014\uffea\016\uffea\020\uffea\024\uffea\025\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\034\uffea\035\uffea\041" +
    "\uffea\042\uffea\001\002\000\024\004\063\006\062\012\101" +
    "\015\064\023\067\026\074\045\066\046\070\054\042\001" +
    "\002\000\006\014\uffdc\016\uffdc\001\002\000\024\004\063" +
    "\006\062\012\101\015\064\023\067\026\074\045\066\046" +
    "\070\054\042\001\002\000\004\004\177\001\002\000\052" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\014\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\041\uffe4\042" +
    "\uffe4\001\002\000\004\020\201\001\002\000\052\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\014\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\041\uffe5\042\uffe5\001" +
    "\002\000\004\041\203\001\002\000\004\022\204\001\002" +
    "\000\020\002\uffd7\007\uffd7\017\uffd7\030\uffd7\043\uffd7\044" +
    "\uffd7\053\uffd7\001\002\000\024\004\063\006\062\012\101" +
    "\015\064\023\067\026\074\045\066\046\070\054\042\001" +
    "\002\000\004\016\207\001\002\000\004\021\131\001\002" +
    "\000\030\007\uffeb\017\uffeb\022\uffeb\030\uffeb\036\uffeb\040" +
    "\uffeb\043\uffeb\044\uffeb\047\uffeb\050\uffeb\054\uffeb\001\002" +
    "\000\004\015\212\001\002\000\016\007\012\016\ufff8\017" +
    "\017\030\011\043\022\044\010\001\002\000\004\016\214" +
    "\001\002\000\004\021\131\001\002\000\016\007\ufffa\017" +
    "\ufffa\030\ufffa\043\ufffa\044\ufffa\053\ufffa\001\002\000\010" +
    "\014\uffd3\027\uffd3\054\uffd3\001\002\000\006\014\221\027" +
    "\222\001\002\000\006\014\uffd0\027\uffd0\001\002\000\014" +
    "\007\012\017\017\030\011\043\022\044\010\001\002\000" +
    "\010\014\uffd2\027\uffd2\054\uffd2\001\002\000\006\014\uffd1" +
    "\027\uffd1\001\002\000\014\011\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\041\uffcf\001\002\000\004\015\226\001\002\000\004" +
    "\016\227\001\002\000\004\021\035\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\044\003\045\004\001\001\000\002\001" +
    "\001\000\014\026\006\042\017\043\015\046\012\047\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\217\027\216\001\001\000\004\026\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\026" +
    "\026\006\030\030\047\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\006\047\032" +
    "\001\001\000\002\001\001\000\004\025\035\001\001\000" +
    "\004\004\036\001\001\000\002\001\001\000\032\002\045" +
    "\003\044\005\053\006\047\007\050\010\051\011\055\012" +
    "\056\013\052\014\054\026\006\047\046\001\001\000\002" +
    "\001\001\000\022\012\070\014\064\031\201\032\075\033" +
    "\074\034\072\035\071\041\077\001\001\000\004\015\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\070\014\064\031" +
    "\076\032\075\033\074\034\072\035\071\041\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\070\014" +
    "\064\031\125\032\075\033\074\034\072\035\071\041\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\120\001" +
    "\001\000\006\036\105\037\104\001\001\000\002\001\001" +
    "\000\014\012\070\014\064\034\101\035\071\041\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\070\014\064\033\117\034" +
    "\072\035\071\041\077\001\001\000\020\012\070\014\064" +
    "\032\116\033\074\034\072\035\071\041\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\104\001\001\000\004" +
    "\040\120\001\001\000\014\012\070\014\064\034\124\035" +
    "\071\041\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\131\001\001\000\004\004\132" +
    "\001\001\000\002\001\001\000\032\002\045\003\044\005" +
    "\053\006\047\007\050\010\051\011\055\012\056\013\052" +
    "\014\054\026\006\047\046\001\001\000\002\001\001\000" +
    "\022\012\070\014\064\031\136\032\075\033\074\034\072" +
    "\035\071\041\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\012\070\014\064\031\141" +
    "\032\075\033\074\034\072\035\071\041\077\001\001\000" +
    "\002\001\001\000\004\024\143\001\001\000\002\001\001" +
    "\000\022\012\070\014\064\031\145\032\075\033\074\034" +
    "\072\035\071\041\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\150\001\001\000\006\016\153\020" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\070\014\064\031" +
    "\156\032\075\033\074\034\072\035\071\041\077\001\001" +
    "\000\002\001\001\000\004\024\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\070\014\064\021" +
    "\167\022\166\031\170\032\075\033\074\034\072\035\071" +
    "\041\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\070\014\064" +
    "\031\173\032\075\033\074\034\072\035\071\041\077\001" +
    "\001\000\002\001\001\000\022\012\070\014\064\031\177" +
    "\032\075\033\074\034\072\035\071\041\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\070\014\064\031\205\032\075\033\074" +
    "\034\072\035\071\041\077\001\001\000\002\001\001\000" +
    "\004\024\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\212\026\006\030\030\047\027\001\001\000" +
    "\002\001\001\000\004\024\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\227\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= FunsProcs main 
            {
              Programa RESULT =null;
		FunProcList fp = (FunProcList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		MainFunction mf = (MainFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Programa(fp,mf); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FunsProcs ::= FunsProcs Funcion 
            {
              FunProcList RESULT =null;
		FunProcList fp = (FunProcList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		FunProc fun = (FunProc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = fp; fp.add(fun); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FunsProcs",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FunsProcs ::= FunsProcs Procedimiento 
            {
              FunProcList RESULT =null;
		FunProcList fp = (FunProcList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		FunProc fun = (FunProc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = fp; fp.add(fun); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FunsProcs",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FunsProcs ::= 
            {
              FunProcList RESULT =null;
		 RESULT = new FunProcList(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FunsProcs",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= INT MAIN PAP PCIERRE BloqueReturn 
            {
              MainFunction RESULT =null;
		 RESULT = new MainFunction();  RESULT.setIdentifier("main"); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("main",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Funcion ::= TipoIden PAP DefArgumentos PCIERRE BloqueReturn 
            {
              FunProc RESULT =null;
		String nom = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		 RESULT = new Function(nom); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Procedimiento ::= VOID IDEN PAP DefArgumentos PCIERRE Bloque 
            {
              FunProc RESULT =null;
		String nom = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		 RESULT = new Procedure(nom); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Procedimiento",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DefArgumentos ::= TiposIdens 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DefArgumentos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefArgumentos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DefArgumentos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruccion ::= Asignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruccion ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruccion ::= If 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruccion ::= IfElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruccion ::= While 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instruccion ::= Llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruccion ::= Switch 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Asignacion ::= AccesoVariable IGUAL E0 PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declaracion ::= TipoIden PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Declaracion ::= TipoIden IGUAL E0 PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // If ::= IF PAP E0 PCIERRE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IfElse ::= If ELSE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IfElse",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // While ::= WHILE PAP E0 PCIERRE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Invoke ::= IDEN PAP Argumentos PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Invoke",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Llamada ::= Invoke PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Llamada",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Switch ::= SWITCH PAP E0 PCIERRE LLAP Cases LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Switch ::= SWITCH PAP E0 PCIERRE LLAP Cases Default LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AccesoVariable ::= IDEN Acceso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AccesoVariable",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Acceso ::= Acceso CAP E0 CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Acceso ::= Acceso PUNTO ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Acceso ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Cases ::= Cases Case 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Cases",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Cases ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Cases",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Case ::= CASE E0 DOSPUNTOS Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Case",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Default ::= DEFAULT DOSPUNTOS Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Default",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Argumentos ::= Args 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Argumentos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Args ::= Args COMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Args ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instrucciones ::= Instrucciones Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instrucciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Bloque ::= LLAP Instrucciones LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BloqueReturn ::= LLAP Instrucciones RETURN E0 PUNTOCOMA LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueReturn",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo ::= CAP Tipo COMA ENT CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo ::= POR Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo ::= MENOR Tipos MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipos ::= Tipos COMA Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipos",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipos ::= Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipos",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TipoIden ::= Tipo IDEN 
            {
              String RESULT =null;
		String nom = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = nom; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoIden",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TiposIdens ::= TiposIdens COMA TipoIden 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposIdens",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TiposIdens ::= TipoIden 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposIdens",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 Op0 E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E1 ::= E1 Op1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= E2 Op2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E3 ::= Op3 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E4 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E4 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E4 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E4 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E4 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E4 ::= AccesoVariable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E4 ::= Invoke 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Op0 ::= IGUALIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Op0 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Op0 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Op0 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Op0 ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Op0 ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Op1 ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Op1 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Op1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Op2 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Op2 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Op2 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Op3 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Op3 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Op3 ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

