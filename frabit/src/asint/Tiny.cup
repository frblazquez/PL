package asint;

import java.util.List;
import java.util.ArrayList;

import java_cup.runtime.*;
import ast.*;
import ast.types.*;
import ast.arguments.*;
import ast.instructions.*;
import ast.expressions.*;
import ast.expressions.access.*;
import alex.TokenValue;
import alex.UnidadLexica;
import alex.AnalizadorLexicoTiny;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
   
   public void unrecovered_syntax_error(Symbol unidadLexica)throws java.lang.Exception {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};

terminal TokenValue MAS, MENOS, POR, DIV, IGUAL, AMPERSAND, MAIN,  
					COMA, PAP, PCIERRE, CAP, CCIERRE, LLAP, LLCIERRE, NULL,
					AND, OR, NOT, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, PUNTO,
					DISTINTO, IGUALIGUAL, IF, ELSE, WHILE, PUNTOCOMA, DOSPUNTOS, 
					INT, BOOL, TRUE, FALSE, RETURN, SWITCH, CASE, DEFAULT, VOID, IDEN, ENT;

non terminal Program S ;
non terminal List<Procedure> Metodos ;
non terminal Procedure Procedimiento;
non terminal Function Funcion ;
non terminal Function Main ;
non terminal Instructions Instrucciones;
non terminal Instructions Bloque;
non terminal Instruction Instruccion;
non terminal List<PairArgumentType> TiposIdens;
non terminal Type Tipo;
non terminal List<Type> Tipos;
non terminal ArgumentsDefinition DefArgumentos;
non terminal Arguments Argumentos;
non terminal List<Expression> Args;
non terminal Expression E0;
non terminal Expression E1;
non terminal Expression E2;
non terminal Expression E3;
non terminal Expression E4;
non terminal Call Llamada;
non terminal InvokeExpression Invoke;
non terminal Assignment Asignacion;
non terminal Definition Declaracion;
non terminal IfElse If;
non terminal IfElse IfElse;
non terminal While While;
non terminal Switch Switch;
non terminal Case Case;
non terminal Case Default;
non terminal List<Case> Cases; 
non terminal Operators Op0;
non terminal Operators Op1;
non terminal Operators Op2;
non terminal Operators Op3;
non terminal VariableAccess AccesoVariable;
non terminal List<Access> Accesos;

// Estructura de un programa: definiciones de funciones/procedimientos y una función main.
S ::= Metodos:fp Main:mf {: RESULT = new Program(fp,mf);:};

Metodos ::= Metodos:fp Funcion:f        {: RESULT = fp; fp.add(f); :} ;
Metodos ::= Metodos:fp Procedimiento:p  {: RESULT = fp; fp.add(p); :} ;
Metodos ::=                             {: RESULT = new ArrayList<Procedure>(); :} ;


Main ::= INT MAIN PAP PCIERRE LLAP Instrucciones:ins RETURN E0:e PUNTOCOMA LLCIERRE 
        {: RESULT = new Function("main", new ArgumentsDefinition(), ins, new IntType(), e); :};

// Declaración de funciones y procedimientos
Funcion ::= Tipo:t IDEN:tv PAP DefArgumentos:args PCIERRE LLAP Instrucciones:ins RETURN E0:e PUNTOCOMA LLCIERRE			
			{: RESULT = new Function(tv.token, args, ins, t, e); :};
Procedimiento ::= VOID IDEN:tv PAP DefArgumentos:args PCIERRE Bloque:ins 	
			{: RESULT = new Procedure(tv.token, args, ins); :};

DefArgumentos ::= TiposIdens:ti {: RESULT = new ArgumentsDefinition(ti); :}
                |               {: RESULT = new ArgumentsDefinition(); :};

// Instrucciones permitidas
Instruccion ::= Asignacion:ass 				{: RESULT = ass; :} 
			 	 | Declaracion:decl			{: RESULT = decl; :}
			 	 | If:iff					{: RESULT = iff; :} 
				 | IfElse:ifelse			{: RESULT = ifelse; :} 					
				 | While:wh					{: RESULT = wh; :} 
				 | Llamada:ll 				{: RESULT = ll; :}
				 | Switch:sw				{: RESULT = sw; :} 
				 | error PUNTOCOMA			{: System.out.println("Instruccion incorrecta"); RESULT = null;:};
// TODO: error PAP   ?? Shouldn't we manage differently errors in whiles, ifs, Switches... (don't end in ';')
// TODO: error LLAP  ??


Asignacion ::= AccesoVariable:a IGUAL E0:e PUNTOCOMA:tv        {: RESULT = new Assignment(a, e); RESULT.setLine(tv.line); :};
Declaracion ::= Tipo:t IDEN:tv PUNTOCOMA                    {: RESULT = new Definition(t,tv.token); RESULT.setLine(tv.line); :}
            |   Tipo:t IDEN:tv IGUAL E0:e PUNTOCOMA         {: RESULT = new Definition(t,tv.token,e); RESULT.setLine(tv.line); :}
            |   error IDEN PUNTOCOMA						{: System.out.println("Se esperaba un tipo válido"); RESULT = null; :}
            |   error IDEN IGUAL E0 PUNTOCOMA				{: System.out.println("Se esperaba un tipo válido"); RESULT = null; :};
            
If ::= IF:tv PAP E0:e PCIERRE Bloque:ins                       {: RESULT = new IfElse(e,ins); RESULT.setLine(tv.line); :};
IfElse ::= IF:tv PAP E0:e PCIERRE Bloque:bif ELSE Bloque:belse {: RESULT = new IfElse(e,bif,belse); RESULT.setLine(tv.line); :};
While ::= WHILE:tv PAP E0:e PCIERRE Bloque:ins                 {: RESULT = new While(e,ins); RESULT.setLine(tv.line); :} ;
Invoke ::= IDEN:tv PAP Argumentos:args PCIERRE              {: RESULT = new InvokeExpression(tv.token, args); RESULT.setLine(tv.line); :};
Llamada ::= Invoke:i PUNTOCOMA                              {: RESULT = new Call(i); :};
Switch ::= SWITCH:tv PAP E0:e PCIERRE LLAP Cases:cs LLCIERRE           {: RESULT = new Switch(e,cs); RESULT.setLine(tv.line); :}
		|  SWITCH:tv PAP E0:e PCIERRE LLAP Cases:cs Default:d LLCIERRE {: RESULT = new Switch(e,cs,d); RESULT.setLine(tv.line); :};                  

AccesoVariable ::= IDEN:tv Accesos:as       {: RESULT = new VariableAccess(tv.token, as); RESULT.setLine(tv.line); :};
Accesos ::= Accesos:as CAP E0:e CCIERRE     {: RESULT = as; as.add(new ArrayAccess(e)); :}
        |   Accesos:as PUNTO ENT:tv        {: RESULT = as; as.add(new RegisterAccess(Integer.parseInt(tv.token))); :}
        |                                   {: RESULT = new ArrayList<Access>(); :};

Cases ::= Cases:cs Case:c                   {: RESULT = cs; cs.add(c); :}
        |                                   {: RESULT = new ArrayList<Case>(); :};
Case ::= CASE ENT:tv DOSPUNTOS Bloque:ins     {: RESULT = new Case(new Constant(tv.token, new IntType()), ins); RESULT.setLine(tv.line); :};
Default ::= DEFAULT DOSPUNTOS Bloque:ins    {: RESULT = new Case(ins); :} ; 

Argumentos ::= Args:args        {: RESULT = new Arguments(args); :} 
            |                   {: RESULT = new Arguments(); :};
Args ::=  Args:args COMA E0:e   {: RESULT = args; args.add(e); :}     
            | E0:e              {: RESULT = new ArrayList<Expression>(); RESULT.add(e); :}   ;

// Bloques de instrucciones 
Bloque ::= LLAP Instrucciones:insts LLCIERRE            {: RESULT = insts; :}
			| error 	{: System.out.println("Se esperaba un bloque"); RESULT = null; :};
Instrucciones ::= Instrucciones:insts Instruccion:ins 	{: RESULT = insts; insts.add(ins); :} 
				| 									    {: RESULT = new Instructions(); :};

// Tipos permitidos
Tipo ::= INT                                        {: RESULT = new IntType(); :}
    | BOOL                                          {: RESULT = new BoolType(); :}
    | POR Tipo:t                                    {: RESULT = new PointerType(t); :}
    | CAP Tipo:t COMA ENT:tv CCIERRE               {: RESULT = new ArrayType(t, Integer.parseInt(tv.token)); :}
    | MENOR Tipos:ts MAYOR                          {: RESULT = new RegisterType(ts); :};
//  | TODO: error {::} ??
//    TODO: Why not having an error production in 'Tipo' definition instead of 
//          having several errors everywhere a type can be placed?

Tipos ::= Tipos:ts COMA Tipo:t                      {: RESULT = ts; ts.add(t); :}
    | Tipo:t                                        {: RESULT = new ArrayList<Type>(); RESULT.add(t); :};
TiposIdens ::= TiposIdens:ti COMA Tipo:t IDEN:tv    {: RESULT = ti; RESULT.add(new PairArgumentType(tv.token, t)); :} 
            |  Tipo:t IDEN:tv                       {: RESULT = new ArrayList<PairArgumentType>(); RESULT.add(new PairArgumentType(tv.token, t)); :}
            |  error IDEN							{: System.out.println("Se esperaba un tipo válido"); RESULT = new ArrayList<PairArgumentType>(); RESULT.add(null); :};

// Expresiones, operadores y prioridades
E0 ::= E1:expa Op0:op E1:expb 		{: RESULT = new BinaryExpression(op,expa,expb); RESULT.setLine(expa.getLine()); :}
		| E1:exp 					{: RESULT = exp; :};
// TODO:| error {::} ??
// TODO: An expression can be syntactically incorrect for several reasons. Having error 
//       clause in E4 makes it think that every error is because an operating is incorrect.
// TODO: One unique global error clause for the expressions ??
E1 ::= E1:expa Op1:op E2:expb 		{: RESULT = new BinaryExpression(op,expa,expb); RESULT.setLine(expa.getLine()); :}
		| E2:exp 					{: RESULT = exp; :};
E2 ::= E2:expa Op2:op E3:expb		{: RESULT = new BinaryExpression(op,expa,expb); RESULT.setLine(expa.getLine()); :}  
		| E3:exp 					{: RESULT = exp; :};
E3 ::= Op3:op E3:exp	            {: RESULT = new UnaryExpression(op,exp); RESULT.setLine(exp.getLine()); :}			   
        | E4:exp		            {: RESULT = exp; :} ;
E4 ::= ENT:tv                      {: RESULT = new Constant(tv.token, new IntType()); RESULT.setLine(tv.line); :}
	| TRUE:tv	                    {: RESULT = new Constant(tv.token, new BoolType()); RESULT.setLine(tv.line); :}
	| FALSE:tv	                    {: RESULT = new Constant(tv.token, new BoolType()); RESULT.setLine(tv.line); :}
	| NULL:tv 		                    {: RESULT = new Constant("null", new PointerType()); RESULT.setLine(tv.line); :}
	| PAP E0:exp PCIERRE            {: RESULT = exp; :}
	| AccesoVariable:av             {: RESULT = av; :}
	| Invoke:in                     {: RESULT = in; :}
	| error							{: System.out.println("Se esperaba un operando"); RESULT = null; :};
    // TODO: Remove error clause from here ??
    // TODO: Add several error clauses in several expression levels ??

Op0 ::= MAYOR 		                {: RESULT = Operators.MAYOR; :}
	| DISTINTO 		                {: RESULT = Operators.DISTINTO; :}
	| MENOR  		                {: RESULT = Operators.MENOR; :}
	| IGUALIGUAL 	                {: RESULT = Operators.IGUALIGUAL; :}
	| MENORIGUAL 	                {: RESULT = Operators.MENORIGUAL; :}
	| MAYORIGUAL 	                {: RESULT = Operators.MAYORIGUAL; :};
    // TODO:| error {::} ??
    // TODO: Should we detect invalid operators? Same for Op1, Op2, Op3?
Op1 ::= MAS 		                {: RESULT = Operators.MAS; :}
	| MENOS 		                {: RESULT = Operators.MENOS; :}
	| OR 			                {: RESULT = Operators.OR; :};	
Op2 ::= POR 		                {: RESULT = Operators.POR; :}
	| DIV 			                {: RESULT = Operators.DIVISION; :}
	| AND 			                {: RESULT = Operators.AND; :};
Op3 ::= MENOS 		                {: RESULT = Operators.MENOS; :}
	| NOT 			                {: RESULT = Operators.NOT; :}
	| AMPERSAND 	                {: RESULT = Operators.AMPERSAND; :};
