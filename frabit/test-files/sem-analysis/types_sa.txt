// File for testing type errors in semantic analysis

int fun1() {
	return true;			// Type coherence error - TODO
}

bool fun2() {
	*int ptr = null;
	return ptr;				// Type coherence error - TODO
}

*int fun3() {
	return (1 + 2)*3*4/4;	// Type coherence error - TODO
}

<int,int> fun4() {
	<int, int> reg;
	reg.0 = 1;
	reg.1 = 2;
	return reg;
}

[int,5] fun5(){
	[int,5] aux;
	aux[0] = 1;
	aux[1] = 1;
	aux[2] = 1;
	aux[3] = 1;
	aux[4] = 1;
	return aux;
}

void proc1(int x, bool y) {
}

void proc2(<int,int> reg, [int,10] arr) {
}

void proc3(*int ptr, int size){
}

int main(){

	int x;
	bool y;
	<int,int>  reg1;
	<int,bool> reg2;
	[int,10]   arr1;
	[int,5]    arr2;
	*int ptr1;
	*bool ptr2;
	
	x = true;						
	y = 1;							
	reg2 = fun4();					
	arr1   = fun5();				// Different array size - TODO?
	reg2 = fun5();			
	arr2  = fun4();			
	reg1  = &x;				
	arr32  = null;					// Is an array a pointer? - TODO
	ptr1   = &y;					// Int pointer =?= Bool pointer - TODO
	ptr2 = &x;
	ptr1 = fun4();					
	ptr2 = fun4();					
	ptr1 = fun5();					
	ptr2 = fun5();					
	ptr1 = fun3();					
	ptr2 = fun3();					
	
	x = proc1(x,y);					// Procedure is not returning anything! - TODO
	proc1(y,x);
	proc2(reg1, arr1);
	proc2(reg2, arr1);
	proc2(reg1, arr2);
	proc2(reg2, arr2);
	proc2(reg1, ptr1);
	proc2(reg1, ptr2);
	proc3(ptr1, x);
	proc3(ptr1, y);
	proc3(ptr2, x);
	proc3(ptr2, y);

	return 0;
}