// File for testing semantic errors in the instructions
int fun1() {
	return true;			// Type coherence error - TODO
}

bool fun2() {
	*int ptr = null;
	return ptr;				// Type coherence error - TODO
}

*int fun3() {
	return (1 + 2)*3*4/4;	// Type coherence error - TODO
}

<int,int> fun4() {
	<int, int> reg;
	reg.0 = 1;
	reg.1 = 2;
	return reg;
}

[int,5] fun5(){
	[int,5] aux;
	aux[0] = 1;
	aux[1] = 1;
	aux[2] = 1;
	aux[3] = 1;
	aux[4] = 1;
	return aux;
}

// Explodes! Two methods with the same name - TODO
void fun1() {
}


int main(){

	int  x;	
	bool y;
	*int ptr;
	
	int  y = true and false or true;	// Repeated identifier 
	bool x = (1 + 5) * 3 / 2;			// Repeated identifier
	<int,bool> reg  = fun4();			// Type coherence error - TODO
	[int, 10] arr   = fun5();			// Type coherence error - TODO
	<int,bool> reg2 = fun5();			// Type coherence error - TODO
	[int, 10] arr2  = fun4();			// Type coherence error - TODO
	<int,int> reg3  = &x;				// Type coherence error - TODO
	[int, 5]  arr3  = null;				// Type coherence error - TODO
	*int ptr2 = fun4();					// Type coherence error - TODO
	
	x = true;						// Type coherence error - TODO
	y = 1;							// Type coherence error - TODO
	ptr  = &x;
	x = true and false or true;
	y = (1 + 5) * 3 / 2;
	x = &y;								// Explodes!
	reg = fun4();						// Explodes! <int,bool> != <int,int> - TODO
	arr = fun5();						// Explodes! - TODO
	
	x = fun1(x);
	y = fun2(x,y);
	y = fun1();
	x = fun2();
	
	
	if(x<y) { x = x + 1; }
	if(x<y  { x = x + 1; }	// parenthesis mismatch - TODO
	if(x<y) { x = x + 1; }
	if(x+1)  {x = x + 1;}
	else     {y = y + 1;}
	if(x+y)  {x = x + 1;}
	else     {y = y + 1;}
	
	while(1+x) { x = 1;}	
	while(x)   { x = 1;}
	while(y)   { x = 1;}

	switch(true){
		case 0: { x = 5;}
		case 1: { y = 3;}
		default:{ x = -1;}
	}
	
	switch(x+y){
		case 0  { x = 5;}
		case 1: { y = 3;}
		case 0: {       }
		default:{ x = -1;}
	}

	switch(fun1()){
		default:{ x = -1;}
	}
	
	
	return 0;
}