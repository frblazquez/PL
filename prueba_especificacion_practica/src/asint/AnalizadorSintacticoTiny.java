
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 15 19:28:47 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 15 19:28:47 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\005\004\000\002\002\004\000\002\005" +
    "\004\000\002\005\002\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\003\007\000\002\003\003\000\002" +
    "\004\005\000\002\006\006\000\002\007\004\000\002\007" +
    "\006\000\002\022\004\000\002\010\005\000\002\011\007" +
    "\000\002\012\014\000\002\013\012\000\002\014\007\000" +
    "\002\037\012\000\002\040\010\000\002\041\007\000\002" +
    "\041\002\000\002\015\004\000\002\015\002\000\002\016" +
    "\003\000\002\016\003\000\002\016\007\000\002\016\004" +
    "\000\002\016\005\000\002\042\005\000\002\042\003\000" +
    "\002\021\004\000\002\021\002\000\002\023\005\000\002" +
    "\023\002\000\002\017\004\000\002\017\002\000\002\020" +
    "\005\000\002\020\002\000\002\035\004\000\002\036\006" +
    "\000\002\036\005\000\002\036\002\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\003\000\002" +
    "\026\005\000\002\026\003\000\002\027\004\000\002\027" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\005\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\034\003\000" +
    "\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\020\002\ufffe\010\010\016\015\026\007\041" +
    "\004\042\006\051\011\001\002\000\010\004\uffe5\013\uffe5" +
    "\025\uffe5\001\002\000\004\004\231\001\002\000\010\004" +
    "\uffe4\013\uffe4\025\uffe4\001\002\000\014\010\010\016\015" +
    "\026\007\041\004\042\006\001\002\000\014\010\010\016" +
    "\015\026\007\041\004\042\006\001\002\000\004\004\214" +
    "\001\002\000\004\002\213\001\002\000\020\002\ufffe\010" +
    "\010\016\015\026\007\041\004\042\006\051\011\001\002" +
    "\000\004\014\024\001\002\000\014\010\010\016\015\026" +
    "\007\041\004\042\006\001\002\000\020\002\ufffe\010\010" +
    "\016\015\026\007\041\004\042\006\051\011\001\002\000" +
    "\004\002\001\001\002\000\004\013\021\001\002\000\004" +
    "\005\022\001\002\000\004\017\023\001\002\000\010\004" +
    "\uffe3\013\uffe3\025\uffe3\001\002\000\016\010\010\015\uffdd" +
    "\016\015\026\007\041\004\042\006\001\002\000\004\015" +
    "\033\001\002\000\006\013\027\015\uffdb\001\002\000\014" +
    "\010\010\016\015\026\007\041\004\042\006\001\002\000" +
    "\004\015\uffde\001\002\000\006\013\027\015\uffdb\001\002" +
    "\000\004\015\uffdc\001\002\000\004\020\034\001\002\000" +
    "\026\004\041\010\010\016\015\026\007\034\043\036\036" +
    "\041\004\042\006\045\uffe6\046\042\001\002\000\032\004" +
    "\ufff6\010\ufff6\016\ufff6\021\ufff6\026\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\041\ufff6\042\ufff6\045\ufff6\046\ufff6\001\002\000" +
    "\004\014\206\001\002\000\032\004\ufff8\010\ufff8\016\ufff8" +
    "\021\ufff8\026\ufff8\034\ufff8\035\204\036\ufff8\041\ufff8\042" +
    "\ufff8\045\ufff8\046\ufff8\001\002\000\030\004\041\010\010" +
    "\016\015\021\uffe6\026\007\034\043\036\036\041\004\042" +
    "\006\045\uffe6\046\042\001\002\000\054\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\165\015\uffd3\016" +
    "\162\017\uffd3\022\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\163\032\uffd3\033\uffd3\037\uffd3\040\uffd3\001" +
    "\002\000\004\014\140\001\002\000\004\014\131\001\002" +
    "\000\030\004\ufffa\010\ufffa\016\ufffa\021\ufffa\026\ufffa\034" +
    "\ufffa\036\ufffa\041\ufffa\042\ufffa\045\ufffa\046\ufffa\001\002" +
    "\000\004\045\125\001\002\000\006\012\121\037\122\001" +
    "\002\000\030\004\ufffc\010\ufffc\016\ufffc\021\ufffc\026\ufffc" +
    "\034\ufffc\036\ufffc\041\ufffc\042\ufffc\045\ufffc\046\ufffc\001" +
    "\002\000\030\004\ufff9\010\ufff9\016\ufff9\021\ufff9\026\ufff9" +
    "\034\ufff9\036\ufff9\041\ufff9\042\ufff9\045\ufff9\046\ufff9\001" +
    "\002\000\030\004\ufffd\010\ufffd\016\ufffd\021\ufffd\026\ufffd" +
    "\034\ufffd\036\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\001" +
    "\002\000\004\012\054\001\002\000\030\004\ufffb\010\ufffb" +
    "\016\ufffb\021\ufffb\026\ufffb\034\ufffb\036\ufffb\041\ufffb\042" +
    "\ufffb\045\ufffb\046\ufffb\001\002\000\020\004\041\005\056" +
    "\007\055\014\057\024\066\043\061\044\063\001\002\000" +
    "\020\004\uffb8\005\uffb8\007\uffb8\014\uffb8\024\uffb8\043\uffb8" +
    "\044\uffb8\001\002\000\044\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\013\uffca\015\uffca\017\uffca\022\uffca\023\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\032\uffca\033\uffca\037\uffca\040" +
    "\uffca\001\002\000\020\004\041\005\056\007\055\014\057" +
    "\024\066\043\061\044\063\001\002\000\044\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\013\uffc6\015\uffc6\017\uffc6\022\uffc6" +
    "\023\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6\033" +
    "\uffc6\037\uffc6\040\uffc6\001\002\000\044\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\013\uffc9\015\uffc9\017\uffc9\022\uffc9\023" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9" +
    "\037\uffc9\040\uffc9\001\002\000\044\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\013\uffc5\015\uffc5\017\uffc5\022\uffc5\023\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\037" +
    "\uffc5\040\uffc5\001\002\000\044\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\013\uffc8\015\uffc8\017\uffc8\022\uffc8\023\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8\037\uffc8" +
    "\040\uffc8\001\002\000\044\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\013\uffcb\015\uffcb\017\uffcb\022\uffcb\023\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\032\uffcb\033\uffcb\037\uffcb\040" +
    "\uffcb\001\002\000\044\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\013\uffcd\015\uffcd\017\uffcd\022\uffcd\023\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\037\uffcd\040\uffcd" +
    "\001\002\000\020\004\uffb7\005\uffb7\007\uffb7\014\uffb7\024" +
    "\uffb7\043\uffb7\044\uffb7\001\002\000\044\006\uffcf\007\uffcf" +
    "\010\115\011\114\013\uffcf\015\uffcf\017\uffcf\022\113\023" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf" +
    "\037\uffcf\040\uffcf\001\002\000\036\006\102\007\100\013" +
    "\uffd1\015\uffd1\017\uffd1\023\107\025\104\026\101\027\103" +
    "\030\075\032\106\033\105\037\uffd1\040\uffd1\001\002\000" +
    "\004\037\074\001\002\000\020\004\041\005\056\007\055" +
    "\014\057\024\066\043\061\044\063\001\002\000\044\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\015\uffcc\017\uffcc" +
    "\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\032" +
    "\uffcc\033\uffcc\037\uffcc\040\uffcc\001\002\000\030\004\ufff4" +
    "\010\ufff4\016\ufff4\021\ufff4\026\ufff4\034\ufff4\036\ufff4\041" +
    "\ufff4\042\ufff4\045\ufff4\046\ufff4\001\002\000\020\004\uffc0" +
    "\005\uffc0\007\uffc0\014\uffc0\024\uffc0\043\uffc0\044\uffc0\001" +
    "\002\000\020\004\041\005\056\007\055\014\057\024\066" +
    "\043\061\044\063\001\002\000\020\004\041\005\056\007" +
    "\055\014\057\024\066\043\061\044\063\001\002\000\020" +
    "\004\uffbd\005\uffbd\007\uffbd\014\uffbd\024\uffbd\043\uffbd\044" +
    "\uffbd\001\002\000\020\004\uffc1\005\uffc1\007\uffc1\014\uffc1" +
    "\024\uffc1\043\uffc1\044\uffc1\001\002\000\020\004\uffbe\005" +
    "\uffbe\007\uffbe\014\uffbe\024\uffbe\043\uffbe\044\uffbe\001\002" +
    "\000\020\004\uffbf\005\uffbf\007\uffbf\014\uffbf\024\uffbf\043" +
    "\uffbf\044\uffbf\001\002\000\020\004\uffc2\005\uffc2\007\uffc2" +
    "\014\uffc2\024\uffc2\043\uffc2\044\uffc2\001\002\000\020\004" +
    "\uffc4\005\uffc4\007\uffc4\014\uffc4\024\uffc4\043\uffc4\044\uffc4" +
    "\001\002\000\020\004\uffc3\005\uffc3\007\uffc3\014\uffc3\024" +
    "\uffc3\043\uffc3\044\uffc3\001\002\000\020\004\uffbc\005\uffbc" +
    "\007\uffbc\014\uffbc\024\uffbc\043\uffbc\044\uffbc\001\002\000" +
    "\022\006\102\007\100\013\uffd2\015\uffd2\017\uffd2\023\107" +
    "\037\uffd2\040\uffd2\001\002\000\044\006\uffd0\007\uffd0\010" +
    "\115\011\114\013\uffd0\015\uffd0\017\uffd0\022\113\023\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\037" +
    "\uffd0\040\uffd0\001\002\000\020\004\041\005\056\007\055" +
    "\014\057\024\066\043\061\044\063\001\002\000\020\004" +
    "\uffb9\005\uffb9\007\uffb9\014\uffb9\024\uffb9\043\uffb9\044\uffb9" +
    "\001\002\000\020\004\uffba\005\uffba\007\uffba\014\uffba\024" +
    "\uffba\043\uffba\044\uffba\001\002\000\020\004\uffbb\005\uffbb" +
    "\007\uffbb\014\uffbb\024\uffbb\043\uffbb\044\uffbb\001\002\000" +
    "\044\006\uffce\007\uffce\010\uffce\011\uffce\013\uffce\015\uffce" +
    "\017\uffce\022\uffce\023\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\032\uffce\033\uffce\037\uffce\040\uffce\001\002\000\004" +
    "\015\120\001\002\000\044\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\013\uffc7\015\uffc7\017\uffc7\022\uffc7\023\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\037\uffc7\040" +
    "\uffc7\001\002\000\020\004\041\005\056\007\055\014\057" +
    "\024\066\043\061\044\063\001\002\000\030\004\ufff3\010" +
    "\ufff3\016\ufff3\021\ufff3\026\ufff3\034\ufff3\036\ufff3\041\ufff3" +
    "\042\ufff3\045\ufff3\046\ufff3\001\002\000\004\037\124\001" +
    "\002\000\030\004\ufff2\010\ufff2\016\ufff2\021\ufff2\026\ufff2" +
    "\034\ufff2\036\ufff2\041\ufff2\042\ufff2\045\ufff2\046\ufff2\001" +
    "\002\000\020\004\041\005\056\007\055\014\057\024\066" +
    "\043\061\044\063\001\002\000\004\037\127\001\002\000" +
    "\004\021\130\001\002\000\020\002\uffee\010\uffee\016\uffee" +
    "\026\uffee\041\uffee\042\uffee\051\uffee\001\002\000\020\004" +
    "\041\005\056\007\055\014\057\024\066\043\061\044\063" +
    "\001\002\000\004\015\133\001\002\000\004\020\134\001" +
    "\002\000\026\004\041\010\010\016\015\021\uffe6\026\007" +
    "\034\043\036\036\041\004\042\006\046\042\001\002\000" +
    "\032\004\ufff7\010\ufff7\016\ufff7\021\ufff7\026\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\041\ufff7\042\ufff7\045\ufff7\046\ufff7\001" +
    "\002\000\004\021\137\001\002\000\032\004\ufff0\010\ufff0" +
    "\016\ufff0\021\ufff0\026\ufff0\034\ufff0\035\ufff0\036\ufff0\041" +
    "\ufff0\042\ufff0\045\ufff0\046\ufff0\001\002\000\020\004\041" +
    "\005\056\007\055\014\057\024\066\043\061\044\063\001" +
    "\002\000\004\015\142\001\002\000\004\020\143\001\002" +
    "\000\004\047\145\001\002\000\006\021\uffe8\050\153\001" +
    "\002\000\020\004\041\005\056\007\055\014\057\024\066" +
    "\043\061\044\063\001\002\000\004\040\147\001\002\000" +
    "\004\020\150\001\002\000\026\004\041\010\010\016\015" +
    "\021\uffe6\026\007\034\043\036\036\041\004\042\006\046" +
    "\042\001\002\000\004\021\152\001\002\000\006\021\uffea" +
    "\050\uffea\001\002\000\004\040\156\001\002\000\004\021" +
    "\155\001\002\000\030\004\uffeb\010\uffeb\016\uffeb\021\uffeb" +
    "\026\uffeb\034\uffeb\036\uffeb\041\uffeb\042\uffeb\045\uffeb\046" +
    "\uffeb\001\002\000\004\020\157\001\002\000\026\004\041" +
    "\010\010\016\015\021\uffe6\026\007\034\043\036\036\041" +
    "\004\042\006\046\042\001\002\000\004\021\161\001\002" +
    "\000\004\021\uffe9\001\002\000\020\004\041\005\056\007" +
    "\055\014\057\024\066\043\061\044\063\001\002\000\004" +
    "\005\176\001\002\000\046\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\015\uffd6\017\uffd6\022\uffd6\023\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\037" +
    "\uffd6\040\uffd6\001\002\000\022\004\041\005\056\007\055" +
    "\014\057\015\uffd9\024\066\043\061\044\063\001\002\000" +
    "\004\015\174\001\002\000\006\013\171\015\uffd7\001\002" +
    "\000\004\015\uffda\001\002\000\020\004\041\005\056\007" +
    "\055\014\057\024\066\043\061\044\063\001\002\000\006" +
    "\013\171\015\uffd7\001\002\000\004\015\uffd8\001\002\000" +
    "\004\037\175\001\002\000\066\004\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\013\uffec\015\uffec\016\uffec\017\uffec\021" +
    "\uffec\022\uffec\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\032\uffec\033\uffec\034\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\045\uffec\046\uffec\001\002\000\052\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016" +
    "\162\017\uffd3\022\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\163\032\uffd3\033\uffd3\037\uffd3\040\uffd3\001" +
    "\002\000\046\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\015\uffd4\017\uffd4\022\uffd4\023\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\037\uffd4\040\uffd4" +
    "\001\002\000\004\017\201\001\002\000\052\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016\162" +
    "\017\uffd3\022\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\163\032\uffd3\033\uffd3\037\uffd3\040\uffd3\001\002" +
    "\000\046\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\015\uffd5\017\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\032\uffd5\033\uffd5\037\uffd5\040\uffd5\001" +
    "\002\000\006\021\uffe7\045\uffe7\001\002\000\004\020\134" +
    "\001\002\000\032\004\ufff5\010\ufff5\016\ufff5\021\ufff5\026" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\041\ufff5\042\ufff5\045\ufff5" +
    "\046\ufff5\001\002\000\020\004\041\005\056\007\055\014" +
    "\057\024\066\043\061\044\063\001\002\000\004\015\210" +
    "\001\002\000\004\020\134\001\002\000\030\004\uffef\010" +
    "\uffef\016\uffef\021\uffef\026\uffef\034\uffef\036\uffef\041\uffef" +
    "\042\uffef\045\uffef\046\uffef\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\014\215\001\002" +
    "\000\016\010\010\015\uffdd\016\015\026\007\041\004\042" +
    "\006\001\002\000\004\015\217\001\002\000\004\020\220" +
    "\001\002\000\026\004\041\010\010\016\015\021\uffe6\026" +
    "\007\034\043\036\036\041\004\042\006\046\042\001\002" +
    "\000\004\021\222\001\002\000\020\002\uffed\010\uffed\016" +
    "\uffed\026\uffed\041\uffed\042\uffed\051\uffed\001\002\000\010" +
    "\004\uffe2\013\uffe2\025\uffe2\001\002\000\006\013\227\025" +
    "\uffdf\001\002\000\004\025\226\001\002\000\010\004\uffe1" +
    "\013\uffe1\025\uffe1\001\002\000\014\010\010\016\015\026" +
    "\007\041\004\042\006\001\002\000\004\025\uffe0\001\002" +
    "\000\014\012\ufff1\013\ufff1\014\ufff1\015\ufff1\037\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\014\005\011\012\015\013\012\016\004\022" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\223\042\224\001\001\000\004\016" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\211\012\015\013\012\016\004\022\013\001\001\000" +
    "\002\001\001\000\004\016\017\001\001\000\014\005\016" +
    "\012\015\013\012\016\004\022\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\004\021\024\022\025\001" +
    "\001\000\002\001\001\000\004\023\027\001\001\000\006" +
    "\016\004\022\030\001\001\000\002\001\001\000\004\023" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\037\003\036\004\034\006\050\007\046\011\052\014" +
    "\043\015\044\016\004\022\045\035\051\037\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\037\003\036\004\034\006\050\007\046\011\052" +
    "\014\043\015\202\016\004\022\045\035\051\037\047\001" +
    "\001\000\004\036\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\061\024" +
    "\070\025\067\026\066\027\064\030\063\034\071\035\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\061\024\116\025\067\026\066\027\064\030\063\034\071" +
    "\035\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\111\001\001\000" +
    "\006\031\076\032\075\001\001\000\002\001\001\000\014" +
    "\014\061\027\072\030\063\034\071\035\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\061\026\110\027\064\030\063\034\071\035\057\001" +
    "\001\000\020\014\061\025\107\026\066\027\064\030\063" +
    "\034\071\035\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\075\001\001\000\004\033\111\001\001\000\014" +
    "\014\061\027\115\030\063\034\071\035\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\061\024\122\025\067\026\066\027\064\030\063\034\071" +
    "\035\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\061\024\125\025\067\026\066" +
    "\027\064\030\063\034\071\035\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\061" +
    "\024\131\025\067\026\066\027\064\030\063\034\071\035" +
    "\057\001\001\000\002\001\001\000\004\010\134\001\001" +
    "\000\032\002\037\003\036\004\034\006\050\007\046\011" +
    "\052\014\043\015\135\016\004\022\045\035\051\037\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\061\024\140\025\067\026\066\027\064" +
    "\030\063\034\071\035\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\143\001\001\000\004\041\153" +
    "\001\001\000\022\014\061\024\145\025\067\026\066\027" +
    "\064\030\063\034\071\035\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\037\003\036\004\034\006" +
    "\050\007\046\011\052\014\043\015\150\016\004\022\045" +
    "\035\051\037\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\037\003\036\004\034\006" +
    "\050\007\046\011\052\014\043\015\157\016\004\022\045" +
    "\035\051\037\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\061\024\177\025\067\026\066\027\064" +
    "\030\063\034\071\035\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\061\017\165\024\166\025\067" +
    "\026\066\027\064\030\063\034\071\035\057\001\001\000" +
    "\002\001\001\000\004\020\167\001\001\000\002\001\001" +
    "\000\022\014\061\024\171\025\067\026\066\027\064\030" +
    "\063\034\071\035\057\001\001\000\004\020\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\204\001\001\000\002\001\001\000\022" +
    "\014\061\024\206\025\067\026\066\027\064\030\063\034" +
    "\071\035\057\001\001\000\002\001\001\000\004\010\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\004\021\215\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\037\003\036\004\034\006\050\007\046\011\052\014\043" +
    "\015\220\016\004\022\045\035\051\037\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\223\042\227\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Funcion S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= Procedimiento S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S0 ::= Asignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S0 ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S0 ::= While 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S0 ::= Llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S0 ::= Switch 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S0 ::= S1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S1 ::= IF PAP E0 PCIERRE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S1 ::= S2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S2 ::= S1 ELSE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S2",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Asignacion ::= AccesoVariable IGUAL E0 PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaracion ::= TipoIden PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declaracion ::= TipoIden IGUAL E0 PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TipoIden ::= Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoIden",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bloque ::= LLAP Sentencias LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // While ::= WHILE PAP E0 PCIERRE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Funcion ::= TipoIden PAP DefArgumentos PCIERRE LLAP Sentencias RETURN E0 PUNTOCOMA LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Procedimiento ::= VOID IDEN PAP DefArgumentos PCIERRE LLAP Sentencias LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Procedimiento",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Llamada ::= IDEN PAP Argumentos PCIERRE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Llamada",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Switch ::= SWITCH PAP E0 PCIERRE LLAP Cases Default LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Cases ::= CASE E0 DOSPUNTOS LLAP Sentencias LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Cases",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Default ::= DEFAULT DOSPUNTOS LLAP Sentencias LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Default",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Default ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Default",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencias ::= S0 Sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencias",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Sentencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencias",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= CAP Tipo COMA ENT CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tipo ::= POR Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Tipo ::= MENOR Tipos MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Tipos ::= Tipo COMA Tipos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipos",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Tipos ::= Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipos",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DefArgumentos ::= TipoIden ComaTI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DefArgumentos",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DefArgumentos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DefArgumentos",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ComaTI ::= COMA TipoIden ComaTI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ComaTI",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ComaTI ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ComaTI",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Argumentos ::= E0 Args 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Argumentos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Args ::= COMA E0 Args 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Args ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AccesoVariable ::= IDEN Acceso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AccesoVariable",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Acceso ::= CAP E0 CCIERRE Acceso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Acceso ::= PUNTO ENT Acceso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Acceso ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E0 ::= E1 Op0 E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E1 ::= E1 Op1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E2 ::= E2 Op2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E3 ::= Op3 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E4 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E4 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E4 ::= AccesoVariable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E4 ::= Llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Op0 ::= IGUALIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Op0 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Op0 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Op0 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Op0 ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Op0 ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Op1 ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Op1 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Op1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Op2 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Op2 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Op2 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Op3 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Op3 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

