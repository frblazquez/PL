
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 22 17:14:41 CET 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 22 17:14:41 CET 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\005\004\000\002\002\004\000\002\005" +
    "\002\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\003\007\000" +
    "\002\003\003\000\002\004\005\000\002\006\006\000\002" +
    "\007\004\000\002\007\006\000\002\022\004\000\002\010" +
    "\005\000\002\011\007\000\002\012\014\000\002\013\007" +
    "\000\002\014\004\000\002\014\002\000\002\016\003\000" +
    "\002\016\003\000\002\016\007\000\002\016\004\000\002" +
    "\021\004\000\002\021\002\000\002\023\005\000\002\023" +
    "\002\000\002\017\004\000\002\017\002\000\002\020\005" +
    "\000\002\020\002\000\002\035\004\000\002\036\006\000" +
    "\002\036\002\000\002\024\005\000\002\024\003\000\002" +
    "\025\005\000\002\025\003\000\002\026\005\000\002\026" +
    "\003\000\002\027\004\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\005\000" +
    "\002\030\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\014\002\uffff\010\011\016\004\037\013\040" +
    "\010\001\002\000\012\010\011\016\004\037\013\040\010" +
    "\001\002\000\004\004\156\001\002\000\004\002\155\001" +
    "\002\000\014\002\uffff\010\011\016\004\037\013\040\010" +
    "\001\002\000\006\004\uffeb\013\uffeb\001\002\000\012\010" +
    "\011\016\004\037\013\040\010\001\002\000\004\014\014" +
    "\001\002\000\006\004\uffec\013\uffec\001\002\000\014\010" +
    "\011\015\uffe7\016\004\037\013\040\010\001\002\000\004" +
    "\015\023\001\002\000\006\013\020\015\uffe5\001\002\000" +
    "\004\015\uffe8\001\002\000\012\010\011\016\004\037\013" +
    "\040\010\001\002\000\006\013\020\015\uffe5\001\002\000" +
    "\004\015\uffe6\001\002\000\004\020\024\001\002\000\022" +
    "\004\031\010\011\016\004\033\032\035\026\037\013\040" +
    "\010\043\uffed\001\002\000\026\004\ufff8\010\ufff8\016\ufff8" +
    "\021\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8\043" +
    "\ufff8\001\002\000\004\014\147\001\002\000\026\004\ufffa" +
    "\010\ufffa\016\ufffa\021\ufffa\033\ufffa\034\145\035\ufffa\037" +
    "\ufffa\040\ufffa\043\ufffa\001\002\000\024\004\031\010\011" +
    "\016\004\021\uffed\033\032\035\026\037\013\040\010\043" +
    "\uffed\001\002\000\010\012\uffde\014\133\016\106\001\002" +
    "\000\004\014\124\001\002\000\004\043\120\001\002\000" +
    "\024\004\ufffb\010\ufffb\016\ufffb\021\ufffb\033\ufffb\035\ufffb" +
    "\037\ufffb\040\ufffb\043\ufffb\001\002\000\006\012\114\036" +
    "\115\001\002\000\024\004\ufffd\010\ufffd\016\ufffd\021\ufffd" +
    "\033\ufffd\035\ufffd\037\ufffd\040\ufffd\043\ufffd\001\002\000" +
    "\024\004\ufffe\010\ufffe\016\ufffe\021\ufffe\033\ufffe\035\ufffe" +
    "\037\ufffe\040\ufffe\043\ufffe\001\002\000\004\012\042\001" +
    "\002\000\024\004\ufffc\010\ufffc\016\ufffc\021\ufffc\033\ufffc" +
    "\035\ufffc\037\ufffc\040\ufffc\043\ufffc\001\002\000\020\004" +
    "\046\005\044\007\043\014\045\024\055\041\050\042\051" +
    "\001\002\000\020\004\uffc4\005\uffc4\007\uffc4\014\uffc4\024" +
    "\uffc4\041\uffc4\042\uffc4\001\002\000\042\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\013\uffd5\015\uffd5\017\uffd5\022\uffd5\023" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\036\uffd5\001\002\000\020\004\046\005\044\007\043\014" +
    "\045\024\055\041\050\042\051\001\002\000\044\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\013\uffde\015\uffde\016\106\017" +
    "\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\036\uffde\001\002\000\042\006\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\013\uffd1\015\uffd1\017\uffd1\022\uffd1" +
    "\023\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\036\uffd1\001\002\000\042\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\013\uffd4\015\uffd4\017\uffd4\022\uffd4\023\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\036\uffd4" +
    "\001\002\000\042\006\uffd3\007\uffd3\010\uffd3\011\uffd3\013" +
    "\uffd3\015\uffd3\017\uffd3\022\uffd3\023\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\036\uffd3\001\002\000" +
    "\042\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\015\uffd6" +
    "\017\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\036\uffd6\001\002\000\042\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\013\uffd8\015\uffd8\017\uffd8\022" +
    "\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\036\uffd8\001\002\000\042\006\uffda\007\uffda\010" +
    "\103\011\102\013\uffda\015\uffda\017\uffda\022\101\023\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\036" +
    "\uffda\001\002\000\020\004\uffc3\005\uffc3\007\uffc3\014\uffc3" +
    "\024\uffc3\041\uffc3\042\uffc3\001\002\000\034\006\070\007" +
    "\066\013\uffdc\015\uffdc\017\uffdc\023\075\025\072\026\067" +
    "\027\071\030\063\031\074\032\073\036\uffdc\001\002\000" +
    "\004\036\062\001\002\000\020\004\046\005\044\007\043" +
    "\014\045\024\055\041\050\042\051\001\002\000\042\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\015\uffd7\017\uffd7" +
    "\022\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\036\uffd7\001\002\000\024\004\ufff6\010\ufff6" +
    "\016\ufff6\021\ufff6\033\ufff6\035\ufff6\037\ufff6\040\ufff6\043" +
    "\ufff6\001\002\000\020\004\uffcc\005\uffcc\007\uffcc\014\uffcc" +
    "\024\uffcc\041\uffcc\042\uffcc\001\002\000\020\004\046\005" +
    "\044\007\043\014\045\024\055\041\050\042\051\001\002" +
    "\000\020\004\046\005\044\007\043\014\045\024\055\041" +
    "\050\042\051\001\002\000\020\004\uffc9\005\uffc9\007\uffc9" +
    "\014\uffc9\024\uffc9\041\uffc9\042\uffc9\001\002\000\020\004" +
    "\uffcd\005\uffcd\007\uffcd\014\uffcd\024\uffcd\041\uffcd\042\uffcd" +
    "\001\002\000\020\004\uffca\005\uffca\007\uffca\014\uffca\024" +
    "\uffca\041\uffca\042\uffca\001\002\000\020\004\uffcb\005\uffcb" +
    "\007\uffcb\014\uffcb\024\uffcb\041\uffcb\042\uffcb\001\002\000" +
    "\020\004\uffce\005\uffce\007\uffce\014\uffce\024\uffce\041\uffce" +
    "\042\uffce\001\002\000\020\004\uffd0\005\uffd0\007\uffd0\014" +
    "\uffd0\024\uffd0\041\uffd0\042\uffd0\001\002\000\020\004\uffcf" +
    "\005\uffcf\007\uffcf\014\uffcf\024\uffcf\041\uffcf\042\uffcf\001" +
    "\002\000\020\004\uffc8\005\uffc8\007\uffc8\014\uffc8\024\uffc8" +
    "\041\uffc8\042\uffc8\001\002\000\020\006\070\007\066\013" +
    "\uffdd\015\uffdd\017\uffdd\023\075\036\uffdd\001\002\000\042" +
    "\006\uffdb\007\uffdb\010\103\011\102\013\uffdb\015\uffdb\017" +
    "\uffdb\022\101\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\036\uffdb\001\002\000\020\004\046\005" +
    "\044\007\043\014\045\024\055\041\050\042\051\001\002" +
    "\000\020\004\uffc5\005\uffc5\007\uffc5\014\uffc5\024\uffc5\041" +
    "\uffc5\042\uffc5\001\002\000\020\004\uffc6\005\uffc6\007\uffc6" +
    "\014\uffc6\024\uffc6\041\uffc6\042\uffc6\001\002\000\020\004" +
    "\uffc7\005\uffc7\007\uffc7\014\uffc7\024\uffc7\041\uffc7\042\uffc7" +
    "\001\002\000\042\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013" +
    "\uffd9\015\uffd9\017\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\036\uffd9\001\002\000" +
    "\044\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\015\uffe0\017\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\036\uffe0\001\002\000\020" +
    "\004\046\005\044\007\043\014\045\024\055\041\050\042" +
    "\051\001\002\000\004\017\110\001\002\000\046\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\015\uffde\016" +
    "\106\017\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\036\uffde\001\002\000\044\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf" +
    "\017\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\036\uffdf\001\002\000\004\015\113" +
    "\001\002\000\042\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013" +
    "\uffd2\015\uffd2\017\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\036\uffd2\001\002\000" +
    "\020\004\046\005\044\007\043\014\045\024\055\041\050" +
    "\042\051\001\002\000\024\004\ufff5\010\ufff5\016\ufff5\021" +
    "\ufff5\033\ufff5\035\ufff5\037\ufff5\040\ufff5\043\ufff5\001\002" +
    "\000\004\036\117\001\002\000\024\004\ufff4\010\ufff4\016" +
    "\ufff4\021\ufff4\033\ufff4\035\ufff4\037\ufff4\040\ufff4\043\ufff4" +
    "\001\002\000\020\004\046\005\044\007\043\014\045\024" +
    "\055\041\050\042\051\001\002\000\004\036\122\001\002" +
    "\000\004\021\123\001\002\000\014\002\ufff0\010\ufff0\016" +
    "\ufff0\037\ufff0\040\ufff0\001\002\000\020\004\046\005\044" +
    "\007\043\014\045\024\055\041\050\042\051\001\002\000" +
    "\004\015\126\001\002\000\004\020\127\001\002\000\022" +
    "\004\031\010\011\016\004\021\uffed\033\032\035\026\037" +
    "\013\040\010\001\002\000\026\004\ufff9\010\ufff9\016\ufff9" +
    "\021\ufff9\033\ufff9\034\ufff9\035\ufff9\037\ufff9\040\ufff9\043" +
    "\ufff9\001\002\000\004\021\132\001\002\000\026\004\ufff2" +
    "\010\ufff2\016\ufff2\021\ufff2\033\ufff2\034\ufff2\035\ufff2\037" +
    "\ufff2\040\ufff2\043\ufff2\001\002\000\022\004\046\005\044" +
    "\007\043\014\045\015\uffe3\024\055\041\050\042\051\001" +
    "\002\000\004\015\142\001\002\000\006\013\136\015\uffe1" +
    "\001\002\000\020\004\046\005\044\007\043\014\045\024" +
    "\055\041\050\042\051\001\002\000\004\015\uffe4\001\002" +
    "\000\006\013\136\015\uffe1\001\002\000\004\015\uffe2\001" +
    "\002\000\004\036\143\001\002\000\024\004\uffef\010\uffef" +
    "\016\uffef\021\uffef\033\uffef\035\uffef\037\uffef\040\uffef\043" +
    "\uffef\001\002\000\006\021\uffee\043\uffee\001\002\000\004" +
    "\020\127\001\002\000\026\004\ufff7\010\ufff7\016\ufff7\021" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\043\ufff7" +
    "\001\002\000\020\004\046\005\044\007\043\014\045\024" +
    "\055\041\050\042\051\001\002\000\004\015\151\001\002" +
    "\000\004\020\127\001\002\000\024\004\ufff1\010\ufff1\016" +
    "\ufff1\021\ufff1\033\ufff1\035\ufff1\037\ufff1\040\ufff1\043\ufff1" +
    "\001\002\000\006\004\uffe9\013\uffe9\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002\000\014\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\036\ufff3\001\002\000\004\013" +
    "\160\001\002\000\004\005\161\001\002\000\004\017\162" +
    "\001\002\000\006\004\uffea\013\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\012\005\005\012\006\016\004\022\011\001" +
    "\001\000\004\016\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\153\012\006\016\004\022\011\001" +
    "\001\000\002\001\001\000\004\016\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\004\021\014\022" +
    "\015\001\001\000\002\001\001\000\004\023\016\001\001" +
    "\000\002\001\001\000\006\016\004\022\020\001\001\000" +
    "\004\023\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\027\003\026\004\024\006\036\007\035\011" +
    "\040\013\033\014\032\016\004\022\034\035\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\027\003\026\004\024\006\036\007\035\011\040" +
    "\013\033\014\143\016\004\022\034\035\037\001\001\000" +
    "\004\036\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\056\025\055\026\053\027\052\030\051\034\057\035" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\111\025\055\026\053\027\052\030\051\034\057\035" +
    "\046\001\001\000\004\036\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\077\001\001\000\002\001\001" +
    "\000\006\031\064\032\063\001\001\000\002\001\001\000" +
    "\012\027\060\030\051\034\057\035\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\076\027\052\030\051\034\057\035\046\001\001\000\016" +
    "\025\075\026\053\027\052\030\051\034\057\035\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\063\001\001" +
    "\000\004\033\077\001\001\000\012\027\103\030\051\034" +
    "\057\035\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\024\106\025\055\026\053\027\052\030\051\034\057" +
    "\035\046\001\001\000\002\001\001\000\004\036\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\024\115\025\055\026\053\027\052\030\051\034" +
    "\057\035\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\120\025\055\026\053\027" +
    "\052\030\051\034\057\035\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\024\124\025" +
    "\055\026\053\027\052\030\051\034\057\035\046\001\001" +
    "\000\002\001\001\000\004\010\127\001\001\000\030\002" +
    "\027\003\026\004\024\006\036\007\035\011\040\013\033" +
    "\014\130\016\004\022\034\035\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\133" +
    "\024\134\025\055\026\053\027\052\030\051\034\057\035" +
    "\046\001\001\000\002\001\001\000\004\020\136\001\001" +
    "\000\020\024\137\025\055\026\053\027\052\030\051\034" +
    "\057\035\046\001\001\000\002\001\001\000\004\020\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\145\001\001\000\002" +
    "\001\001\000\020\024\147\025\055\026\053\027\052\030" +
    "\051\034\057\035\046\001\001\000\002\001\001\000\004" +
    "\010\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Funcion S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S0 ::= Asignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S0 ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S0 ::= While 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S0 ::= Llamada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S0 ::= S1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S1 ::= IF PAP E0 PCIERRE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S1 ::= S2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S2 ::= S1 ELSE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S2",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Asignacion ::= AccesoVariable IGUAL E0 PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaracion ::= TipoIden PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaracion ::= TipoIden IGUAL E0 PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TipoIden ::= Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoIden",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Bloque ::= LLAP Sentencias LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // While ::= WHILE PAP E0 PCIERRE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Funcion ::= TipoIden PAP DefArgumentos PCIERRE LLAP Sentencias RETURN E0 PUNTOCOMA LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Llamada ::= IDEN PAP Argumentos PCIERRE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Llamada",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencias ::= S0 Sentencias 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencias",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencias",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= CAP Tipo COMA ENT CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= POR Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefArgumentos ::= TipoIden ComaTI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DefArgumentos",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefArgumentos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DefArgumentos",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ComaTI ::= COMA TipoIden ComaTI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ComaTI",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ComaTI ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ComaTI",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Argumentos ::= E0 Args 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Argumentos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Args ::= COMA E0 Args 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Args ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AccesoVariable ::= IDEN Acceso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AccesoVariable",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Acceso ::= CAP E0 CCIERRE Acceso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Acceso ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E0 ::= E1 Op0 E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E1 ::= E1 Op1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E2 ::= E2 Op2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E3 ::= Op3 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E4 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E4 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E4 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E4 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E4 ::= AccesoVariable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Op0 ::= IGUALIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Op0 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Op0 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Op0 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Op0 ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Op0 ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op0",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Op1 ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Op1 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Op1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Op2 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Op2 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Op2 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Op3 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Op3 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

