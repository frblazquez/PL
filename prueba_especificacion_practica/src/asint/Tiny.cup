package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};

terminal	IDEN, ENT, MAS, MENOS, POR, DIV, IGUAL,
			COMA, PAP, PCIERRE, CAP, CCIERRE, LLAP, LLCIERRE,
			AND, OR, NOT, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, 
			DISTINTO, IGUALIGUAL, IF, ELSE, WHILE, PUNTOCOMA, 
			INT, BOOL, TRUE, FALSE, RETURN ;

non terminal	S0, S1, S2, S, Asignacion, Declaracion, Bloque,
				While, Funcion, Llamada, Sentencias, Funciones,
				Tipo, Argumentos, Args, DefArgumentos, TipoIden,
				ComaTI, E0, E1, E2, E3, E4,
				Op0, Op1, Op2, Op3, AccesoVariable, Acceso ;

S ::= Funcion S | ;
S0 ::= Asignacion | Declaracion | While | Llamada | S1 ;
S1 ::= IF PAP E0 PCIERRE Bloque | S2 ;
S2 ::= S1 ELSE Bloque ;
Asignacion ::= AccesoVariable IGUAL E0 PUNTOCOMA ;
Declaracion ::= TipoIden PUNTOCOMA | TipoIden IGUAL E0 PUNTOCOMA ;
TipoIden ::= Tipo IDEN ;
Bloque ::= LLAP Sentencias LLCIERRE ;
While ::= WHILE PAP E0 PCIERRE Bloque ;
Funcion ::= TipoIden PAP DefArgumentos PCIERRE LLAP Sentencias RETURN E0 PUNTOCOMA LLCIERRE ;
Llamada ::= IDEN PAP Argumentos PCIERRE PUNTOCOMA ;
Sentencias ::= S0 Sentencias | ;
Tipo ::= INT | BOOL | CAP Tipo COMA ENT CCIERRE | POR Tipo ;
DefArgumentos ::= TipoIden ComaTI | ;
ComaTI ::= COMA TipoIden ComaTI | ;
Argumentos ::= E0 Args | ;
Args ::= COMA E0 Args | ;

AccesoVariable ::= IDEN Acceso ;
Acceso ::= CAP E0 CCIERRE Acceso | ;

E0 ::= E1 Op0 E1 | E1 ;
E1 ::= E1 Op1 E2 | E2 ;
E2 ::= E2 Op2 E3 | E3 ;
E3 ::= Op3 E3 | E4 ;
E4 ::= ENT | TRUE | FALSE | PAP E0 PCIERRE | AccesoVariable ;
Op0 ::= IGUALIGUAL | DISTINTO | MAYOR | MENOR | MENORIGUAL | MAYORIGUAL ;
Op1 ::= MAS | MENOS | OR ;
Op2 ::= POR | DIV | AND ;
Op3 ::= MENOS | NOT ;

