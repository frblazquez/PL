
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package asint;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import alex.Lexer;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\005\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\004\004\005\001\002\000\004\002\033\001" +
    "\002\000\004\012\006\001\002\000\012\004\012\005\010" +
    "\007\007\013\011\001\002\000\012\004\ufff2\005\ufff2\007" +
    "\ufff2\013\ufff2\001\002\000\016\002\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\014\ufff9\001\002\000\012\004\012\005" +
    "\010\007\007\013\011\001\002\000\016\002\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\014\ufff8\001\002\000\016\002" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\014\ufffa\001\002" +
    "\000\016\002\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\014" +
    "\ufffc\001\002\000\016\002\ufffe\006\ufffe\007\ufffe\010\027" +
    "\011\026\014\ufffe\001\002\000\010\002\001\006\022\007" +
    "\023\001\002\000\012\004\012\005\010\007\007\013\011" +
    "\001\002\000\016\002\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\014\ufffb\001\002\000\012\004\012\005\010\007\007" +
    "\013\011\001\002\000\012\004\ufff6\005\ufff6\007\ufff6\013" +
    "\ufff6\001\002\000\012\004\ufff5\005\ufff5\007\ufff5\013\ufff5" +
    "\001\002\000\016\002\uffff\006\uffff\007\uffff\010\027\011" +
    "\026\014\uffff\001\002\000\012\004\012\005\010\007\007" +
    "\013\011\001\002\000\012\004\ufff3\005\ufff3\007\ufff3\013" +
    "\ufff3\001\002\000\012\004\ufff4\005\ufff4\007\ufff4\013\ufff4" +
    "\001\002\000\016\002\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\014\ufffd\001\002\000\010\006\022\007\023\014\032" +
    "\001\002\000\016\002\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\014\ufff7\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\015\004\014\005\013\006\012" +
    "\011\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\030\004\014\005\013\006\012\011\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\024\001\001\000\004\007\020\001\001\000\010" +
    "\005\017\006\012\011\016\001\001\000\002\001\001\000" +
    "\012\004\023\005\013\006\012\011\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\024\001\001\000" +
    "\010\005\027\006\012\011\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\020\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
  }
  public static void main(String[] args) throws Exception {
      // initialize the symbol factory
      ComplexSymbolFactory csf = new ComplexSymbolFactory();
      // create a buffering scanner wrapper
	ScannerBuffer lexer = new ScannerBuffer(
		new Lexer(new BufferedReader(new FileReader("src/main/resources/input.txt")), csf));
      // start parsing
      Parser p = new Parser(lexer,csf);
      XMLElement e = (XMLElement)p.parse().value;

      // create XML output file 
      XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
      XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream("src/main/resources/output/simple.xml"));
      // dump XML output to the file
      XMLElement.dump(lexer,sw,e,"expr","stmt");
      
       // transform the parse tree into an AST and a rendered HTML version
      Transformer transformer = TransformerFactory.newInstance()
	    .newTransformer(new StreamSource(new File("src/main/resources/tree.xsl")));
	Source text = new StreamSource(new File("src/main/resources/output/simple.xml"));
      transformer.transform(text, new StreamResult(new File("src/main/resources/output/output.xml")));
      transformer = TransformerFactory.newInstance()
	    .newTransformer(new StreamSource(new File("src/main/resources/tree-view.xsl")));
      text = new StreamSource(new File("src/main/resources/output/output.xml"));
      transformer.transform(text, new StreamResult(new File("src/main/resources/output/ast.html")));
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= IDEN IGUAL E1 
            {
                XMLElement RESULT;
		Location IDEN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IDEN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IDEN0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location IGUAL1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location IGUAL1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object IGUAL1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location E12xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location E12xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object E12 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("S",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
                XMLElement RESULT;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location EOF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location EOF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object EOF1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("_START",0,(XMLElement)start_val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E1 ::= E1 Op1 E2 
            {
                XMLElement RESULT;
		Location E10xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location E10xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object E10 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location Op11xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location Op11xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object Op11 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location E22xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location E22xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object E22 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("E1",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E1 ::= E2 
            {
                XMLElement RESULT;
		Location E20xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location E20xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object E20 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("E1",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E2 ::= E2 Op2 E3 
            {
                XMLElement RESULT;
		Location E20xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location E20xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object E20 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location Op21xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location Op21xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object Op21 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location E32xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location E32xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object E32 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("E2",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E2 ::= E3 
            {
                XMLElement RESULT;
		Location E30xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location E30xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object E30 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("E2",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E3 ::= Op3 E3 
            {
                XMLElement RESULT;
		Location Op30xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location Op30xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object Op30 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location E31xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location E31xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object E31 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("E3",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E3",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E3 ::= E4 
            {
                XMLElement RESULT;
		Location E40xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location E40xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object E40 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("E3",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E3",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E4 ::= ENT 
            {
                XMLElement RESULT;
		Location ENT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ENT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ENT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("E4",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E4",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E4 ::= IDEN 
            {
                XMLElement RESULT;
		Location IDEN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDEN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDEN0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("E4",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E4",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E4 ::= PAP E1 PCIERRE 
            {
                XMLElement RESULT;
		Location PAP0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location PAP0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object PAP0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location E11xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location E11xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object E11 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location PCIERRE2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location PCIERRE2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object PCIERRE2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("E4",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E4",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Op1 ::= MAS 
            {
                XMLElement RESULT;
		Location MAS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location MAS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object MAS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Op1",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Op1 ::= MENOS 
            {
                XMLElement RESULT;
		Location MENOS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location MENOS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object MENOS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Op1",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Op2 ::= POR 
            {
                XMLElement RESULT;
		Location POR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location POR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object POR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Op2",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Op2 ::= DIV 
            {
                XMLElement RESULT;
		Location DIV0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location DIV0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object DIV0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Op2",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Op3 ::= MENOS 
            {
                XMLElement RESULT;
		Location MENOS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location MENOS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object MENOS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Op3",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op3",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
